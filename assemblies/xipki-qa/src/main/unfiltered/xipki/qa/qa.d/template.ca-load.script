################################################################################
#
# Copyright (c) 2013 - 2018 Lijun Liao
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

echo "#################################################################"
echo "#                      Initialize the database                  #"
echo "#################################################################"

xi:initdb \
  --force \
  --db-conf xipki/ca-config/ca-db.properties \
  --db-schema xipki/sql/ca-init.xml

xi:initdb \
  --force \
  --db-conf xipki/ca-config/ocsp-db.properties \
  --db-schema xipki/sql/ocsp-init.xml

xi:initdb --force \
  --db-conf  xipki/ocsp-config/ocsp-cache-db.properties \
  --db-schema xipki/sql/ocsp-cache-init.xml

xi:initdb --force \
  --db-conf  xipki/ocsp-config/ocsp-crl-db.properties \
  --db-schema xipki/sql/ocsp-init.xml

feature:install xipki-custom-certprofiles

feature:install xipki-caserver

feature:install xipki-camgmt-shell

echo "Sleeping 1 second"
sleep 1

ca:restart

## Create the CSR for the command caqa:check-cert in QA
if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:csr-p11 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --slot $SLOT --label rootca1 --out output/rootca1.csr \
    --subject "CN=rootca1,O=xipki,C=DE" --keyusage cRLSign
} else {
  xi:csr-p12 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --p12 output/rootca1.p12 --password 1234 \
    --out output/rootca1.csr \
    --subject "CN=rootca1,O=xipki,C=DE" \
    --keyusage cRLSign
}

echo "#################################################################"
echo "#                         Load rootca.xml                       #"
echo "#################################################################"

if { $TOKEN_TYPE equals "pkcs11" } then {
  CA_SIGNER_CONF = "algo=$SIGALGO,slot=$SLOT,key-label=rootca1"
} else {
  CA_SIGNER_CONF = "password=PBE:AQfQj/oIsHT0tGydAasTIJz0xhCA0KBFQoVh11UwhiQ/PMWZOpnXbErRLbX3Jc9VcQIqXg==,keystore=file:output/rootca1.p12,algo=$SIGALGO"
}

xi:copy-file -f xipki/qa/qa.d/template.rootca.xml xipki/qa/qa.d/rootca.xml

xi:replace --old "REPLACEME-CMP_SIGALGO" --new "$CMP_SIGALGO" \
  xipki/qa/qa.d/rootca.xml

xi:replace --old "REPLACEME-TOKEN_TYPE" --new "$TOKEN_TYPE" \
  xipki/qa/qa.d/rootca.xml

xi:replace --old "REPLACEME-CA_SIGNERCONF" --new "$CA_SIGNER_CONF" \
  xipki/qa/qa.d/rootca.xml

xi:replace --old "REPLACEME-SIGALGO" --new "$SIGALGO" \
  xipki/qa/qa.d/rootca.xml

xi:replace --old "REPLACEME-HASH" --new "$STDHASH" \
  xipki/qa/qa.d/rootca.xml

xi:replace --old "REPLACEME-OUTFORM" --new "$OUTFORM" \
  xipki/qa/qa.d/rootca.xml

ca:load-conf --conf-file xipki/qa/qa.d/rootca.xml

## Update the certificate in the device
if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:update-cert-p11 --slot $SLOT --label rootca1 --cert output/rootca1.crt
} else {
  xi:update-cert-p12 --p12 output/rootca1.p12 --password 1234 --cert output/rootca1.crt
}

## Generate keys and CSR for subca1
if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:csr-p11 --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --slot $SLOT --label subca1 \
    --outform $OUTFORM \
    --out output/subca1.csr \
    --subject "CN=subca1,O=xipki,C=DE"
} else {
  xi:csr-p12 --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --p12 output/subca1.p12 --password 1234 \
    --outform $OUTFORM \
    --out output/subca1.csr \
    --subject "CN=subca1,O=xipki,C=DE"
}

ca:enroll-cert --ca rootca1 --csr output/subca1.csr \
  --outform $OUTFORM \
  --out output/subca1.crt --profile subca

if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:update-cert-p11 --slot $SLOT --label subca1 \
    --cert output/subca1.crt \
} else {
  xi:update-cert-p12 --p12 output/subca1.p12 --password 1234 \
    --cert output/subca1.crt --ca-cert output/rootca1.crt
}

## Generate keys and CSR for subcawithcrl
if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:csr-p11 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --slot $SLOT --label subcawithcrl1 \
    --outform $OUTFORM \
    --out output/subcawithcrl1.csr \
    --subject "CN=subcawithcrl, O=xipki, C=DE" \
    --subject-alt-name "[1]info@xipki.org" \
    --subject-alt-name "[2]xipki.org" \
    --subject-alt-name "[5]edi-nameAssigner-1=edi-partyName1" \
    --subject-alt-name "[6]http://xipki.org/abc" \
    --subject-alt-name "[7]192.168.0.1" \
    --subject-alt-name "[8]1.2.3.4" \
    --subject-alt-name "[0]2.5.4.10=long organization name" \
    --subject-info-access "1.3.6.1.5.5.7.48.5=[6]http://example.org/abc" \
    --keyusage cRLSign
} else {
  xi:csr-p12 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --p12 output/subcawithcrl1.p12 --password 1234 \
    --outform $OUTFORM \
    --out output/subcawithcrl1.csr \
    --subject "CN=subcawithcrl1, O=xipki, C=DE" \
    --subject-alt-name "[1]info@xipki.org" \
    --subject-alt-name "[2]xipki.org" \
    --subject-alt-name "[5]edi-nameAssigner-1=edi-partyName1" \
    --subject-alt-name "[6]http://xipki.org/abc" \
    --subject-alt-name "[7]192.168.0.1" \
    --subject-alt-name "[8]1.2.3.4" \
    --subject-alt-name "[0]2.5.4.10=long organization name" \
    --subject-info-access "1.3.6.1.5.5.7.48.5=[6]http://example.org/abc" \
    --keyusage cRLSign
}

ca:enroll-cert --ca rootca1 --csr output/subcawithcrl1.csr \
  --outform $OUTFORM \
  --out output/subcawithcrl1.crt \
  --profile subca-Complex

if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:update-cert-p11 --slot $SLOT --label subcawithcrl1 \
    --cert output/subcawithcrl1.crt \
} else {
  xi:update-cert-p12 --p12 output/subcawithcrl1.p12 --password 1234 \
    --cert output/subcawithcrl1.crt --ca-cert output/rootca1.crt
}

## Generate keys and CSR for OCSPResponder
if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:csr-p11 --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --slot $SLOT --label ocsp99 \
    --outform $OUTFORM \
    --out output/ocsp99.csr \
    --subject "CN=ocsp99,2.5.4.97=VATDE-123456789,O=xipki,C=DE"
} else {
  xi:csr-p12 --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --p12 output/ocsp99.p12 --password 1234 \
    --outform $OUTFORM \
    --out output/ocsp99.csr \
    --subject "CN=ocsp99,2.5.4.97=VATDE-123456789,O=xipki,C=DE"
}

ca:enroll-cert --ca rootca1 --csr output/ocsp99.csr \
  --outform $OUTFORM \
  --out output/ocsp99.crt \
  --profile ocsp

if { $TOKEN_TYPE equals "pkcs11" } then {
  xi:update-cert-p11 --slot $SLOT --label ocsp99 --cert output/ocsp99.crt \
} else {
  xi:update-cert-p12 --p12 output/ocsp99.p12 --password 1234 \
    --cert output/ocsp99.crt --ca-cert output/rootca1.crt
}

ca:caprofile-rm -f --ca rootca1 --profile ocsp

echo "#################################################################"
echo "#                        Add subca with OCSP                    #"
echo "#################################################################"
## Add CA

if { $TOKEN_TYPE equals "pkcs11" } then {
  CA_SIGNER_CONF = "algo=$SIGALGO,slot=$SLOT,key-label=subca1"
} else {
  CA_SIGNER_CONF = "password=PBE:AQfQj/oIsHT0tGydAasTIJz0xhCA0KBFQoVh11UwhiQ/PMWZOpnXbErRLbX3Jc9VcQIqXg==,keystore=file:output/subca1.p12,algo=$SIGALGO"
}

xi:copy-file -f xipki/qa/qa.d/template.subca.xml xipki/qa/qa.d/subca.xml

xi:replace --old "REPLACEME-CMP_SIGALGO" --new "$CMP_SIGALGO" \
  xipki/qa/qa.d/subca.xml

xi:replace --old "REPLACEME-TOKEN_TYPE" --new "$TOKEN_TYPE" \
  xipki/qa/qa.d/subca.xml

xi:replace --old "REPLACEME-CA_SIGNERCONF" --new "$CA_SIGNER_CONF" \
  xipki/qa/qa.d/subca.xml

xi:replace --old "REPLACEME-SIGALGO" --new "$SIGALGO" \
  xipki/qa/qa.d/subca.xml

xi:replace --old "REPLACEME-HASH" --new "$STDHASH" \
  xipki/qa/qa.d/subca.xml

ca:load-conf --conf-file xipki/qa/qa.d/subca.xml

# Remove CertProfile rootca

ca:profile-rm -f rootca

## Restart the CA
#ca:restart

echo "#################################################################"
echo "#                       Add subca with CRL                      #"
echo "#################################################################"
## Add CA

if { $TOKEN_TYPE equals "pkcs11" } then {
  CA_SIGNER_CONF = "algo=$SIGALGO,slot=$SLOT,key-label=subcawithcrl1"
} else {
  CA_SIGNER_CONF = "password=PBE:AQfQj/oIsHT0tGydAasTIJz0xhCA0KBFQoVh11UwhiQ/PMWZOpnXbErRLbX3Jc9VcQIqXg==,keystore=file:output/subcawithcrl1.p12,algo=$SIGALGO"
}

xi:copy-file -f xipki/qa/qa.d/template.subcawithcrl.xml \
  xipki/qa/qa.d/subcawithcrl.xml

xi:replace --old "REPLACEME-CMP_SIGALGO" --new "$CMP_SIGALGO" \
  xipki/qa/qa.d/subcawithcrl.xml

xi:replace --old "REPLACEME-TOKEN_TYPE" --new "$TOKEN_TYPE" \
  xipki/qa/qa.d/subcawithcrl.xml

xi:replace --old "REPLACEME-CA_SIGNERCONF" --new "$CA_SIGNER_CONF" \
  xipki/qa/qa.d/subcawithcrl.xml

xi:replace --old "REPLACEME-SIGALGO" --new "$SIGALGO" \
  xipki/qa/qa.d/subcawithcrl.xml

xi:replace --old "REPLACEME-HASH" --new "$STDHASH" \
  xipki/qa/qa.d/subcawithcrl.xml

ca:load-conf --conf-file xipki/qa/qa.d/subcawithcrl.xml

source file:./xipki/qa/qa.d/scep-server.script
