################################################################################
#
# Copyright (c) 2013 - 2018 Lijun Liao
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

xi:rm -r -f output

xi:mkdir output

echo "========================================================"
echo "HASH:       $HASH"
echo "STDHASH:    $STDHASH"
echo "TOKEN_TYPE: $TOKEN_TYPE"
echo "SIG_TYPE:   $SIG_TYPE"
echo "KEYSPEC:    $KEYSPEC"
echo "========================================================"

KEY_TYPE = ""
KEY_DIR = ""

if { $SIG_TYPE equals "RSA" } then {
  KEY_TYPE = "RSA"
  KEY_DIR = "rsa"
  SIGALGO = "${HASH}withRSA"
} elif { $SIG_TYPE equals "RSAPSS" } then {
  KEY_TYPE = "RSA"
  KEY_DIR = "rsa"
  SIGALGO = "${HASH}withRSAandMGF1"
} elif { $SIG_TYPE equals "EC" } then {
  KEY_TYPE = "EC"
  KEY_DIR = "ec"
  SIGALGO = "${HASH}withECDSA"
} elif { $SIG_TYPE equals "PLAINEC" } then {
  KEY_TYPE = "EC"
  KEY_DIR = "ec"
  SIGALGO = "${HASH}withPlainECDSA"
} elif { $SIG_TYPE equals "DSA" } then {
  KEY_TYPE = "DSA"
  KEY_DIR = "dsa"
  SIGALGO = "${HASH}withDSA"
} elif { $SIG_TYPE equals "SM2" } then {
  KEY_TYPE = "SM2"
  KEY_DIR = "sm2"
  SIGALGO = "${HASH}withSM2"
}

if { $SIG_TYPE equals "RSAPSS" } then {
  CMP_SIGALGO = "${STDHASH}withRSAandMGF1"
} else {
  CMP_SIGALGO = "${STDHASH}withRSA"
}

xi:copy-dir xipki/qa/p12/shared output

xi:copy-dir xipki/qa/p12/${KEY_DIR} output

if { "$KEYSPEC" equals "" } then {
  if { $KEY_TYPE equals "RSA" } then {
    KEYSPEC = "2048"
  } elif { $KEY_TYPE equals "EC" } then {
    KEYSPEC = "secp256r1"
  } elif { $KEY_TYPE equals "DSA" } then {
    KEYSPEC = "2048"
  }
}

list = [ rootca1 subca1 subcawithcrl1 ocsp99 ]

if { $TOKEN_TYPE equals "PKCS11" } then {
  SLOT = "0"

  OCSP_KEYCONF = "slot=$SLOT,key-label=ocsp99"

  each ($list) {
    xi:delete-key-p11 --force --slot $SLOT --label ${it}

    if { $KEY_TYPE equals "RSA" } then {
      xi:rsa-p11 --key-size $KEYSPEC --slot $SLOT --label ${it}
    } elif { $KEY_TYPE equals "EC" } then {
      xi:ec-p11 --curve $KEYSPEC --slot $SLOT --label ${it}
    } elif { $KEY_TYPE equals "DSA" } then {
      xi:dsa-p11 --plen $KEYSPEC --slot $SLOT --label ${it}
    } elif { $KEY_TYPE equals "SM2" } then {
      xi:sm2-p11 --slot $SLOT --label ${it}
    }
  }

}

if { $TOKEN_TYPE equals "PKCS12" } then {

  OCSP_KEYCONF = "password=1234,keystore=file:output/ocsp99.p12"

  each ($list) {
    if { $KEY_TYPE equals "RSA" } then {
      xi:rsa-p12 --password 1234 --key-size $KEYSPEC --out output/${it}.p12
    } elif { $KEY_TYPE equals "DSA" } then {
      xi:dsa-p12 --password 1234 --plen $KEYSPEC --out output/${it}.p12
    } elif { $KEY_TYPE equals "EC" } then {
      xi:ec-p12 --curve $KEYSPEC --password 1234 --out output/${it}.p12
    } elif { $KEY_TYPE equals "SM2" } then {
      xi:sm2-p12 --password 1234 --out output/${it}.p12
    }
  }

}
