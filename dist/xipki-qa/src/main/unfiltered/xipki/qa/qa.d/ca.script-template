echo "#################################################################"
echo "#                      Initialize the database                  #"
echo "#################################################################"

echo "Sleeping 1 second"
sleep 1

ca:initdb-pki \
  --force

ca:initdb \
  --force \
  --db-conf  xipki/ocsp-config/ocsp-cache-db.properties \
  --db-schema xipki/sql/ocsp-cache-init.xml

ca:initdb \
  --force \
  --db-conf  xipki/ocsp-config/ocsp-crl-db.properties \
  --db-schema xipki/sql/ocsp-init.xml

feature:install -r xipki-custom-certprofiles

feature:install -r xipki-caserver

feature:install -r xipki-camgmt-shell

echo "Sleeping 1 second"
sleep 1

ca:restart

echo "#################################################################"
echo "#                       Prepare environment                    #"
echo "#################################################################"

## CMP control: messagetime.bias is set to 300 seconds.
# The popo.algo ${STDHASH}withRSA is for the enrollment of scep responder certificates
ca:cmpcontrol-add \
  --name cmpcontrol1 \
  --conf send.ca=true,messagetime.bias=300,rr.aki.required=true,group.enroll=true,protection.sigalgo=REPLACEME-CMP_SIGALGO,popo.sigalgo=$SIGALGO:${STDHASH}withRSA:${STDHASH}withECDSA:${STDHASH}withDSA

## Certificate Profiles

list = [ cross subca subca-complex ocsp scep multiple-ous \
  multi-valued-rdn qc ee-complex tls tls-c tls-inc-sn gsmc-k max-time ]

each ($list) {
  ca:profile-add --type XML --name ${it} \
    --conf-file xipki/qa/certprofile/certprofile-${it}.xml
}

ca:profile-add \
  --name tlsa \
  --type XML \
  --conf-file xipki/qa/certprofile/certprofile-tls.xml

ca:profile-add \
  --name extended \
  --type DemoXML \
  --conf-file xipki/qa/certprofile/certprofile-extended.xml

## Publishers
ca:publisher-add \
  --name ocsp-publisher \
  --type OCSP \
  --conf datasource=ocsp,publish.goodcerts=true

# CMP Responder
# with encrypted password 1234
ca:responder-add \
  --name responder1 \
  --signer-type PKCS12 \
  --signer-conf password=PBE:AQfQj/oIsHT0tGydAasTIJz0xhCA0KBFQoVh11UwhiQ/PMWZOpnXbErRLbX3Jc9VcQIqXg==,keystore=file:xipki/security/tlskeys/tls-server.p12,algo=REPLACEME-CMP_SIGALGO

# CMP Requestors
ca:requestor-add \
  --name requestor1 \
  --cert xipki/security/tlskeys/tls-client.der

## CRL Signer
# Generate CRL every day at 02:00 UTC with 90 minutes overlap time
ca:crlsigner-add \
  --name casign-crlsigner \
  --signer-type CA \
  --control updateMode=interval,fullCRL.intervals=1,overlap.minutes=90,interval.time=02:00,xipki.certset=false

echo "Sleeping 1 second"
sleep 1

echo "#################################################################"
echo "#                        Generate rootca                        #"
echo "#################################################################"
## Add the profile rootca
ca:profile-add \
  --name rootca \
  --type XML \
  --conf-file xipki/qa/certprofile/certprofile-rootca.xml

## Create the CSR for the command caqa:check-cert in QA
if { $TOKEN_TYPE equals "PKCS11" } {
  xi:csr-p11 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --slot $SLOT \
    --label rootca1 \
    --out output/rootca1.csr \
    --subject "CN=rootca1,O=xipki,C=DE" \
    --keyusage cRLSign
} {
  xi:csr-p12 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --p12 output/rootca1.p12 \
    --password 1234 \
    --out output/rootca1.csr \
    --subject "CN=rootca1,O=xipki,C=DE" \
    --keyusage cRLSign
}

## Generate selfsigned rootca

if { $TOKEN_TYPE equals "PKCS11" } {
  CA_SIGNER_CONF = "algo=$SIGALGO,slot=$SLOT,key-label=rootca1"
}

if { $TOKEN_TYPE equals "PKCS12" } {
  CA_SIGNER_CONF = "algo=$SIGALGO,keystore=file:output/rootca1.p12,password=PBE:AQfQj/oIsHT0tGydAasTIJz0xhCA0KBFQoVh11UwhiQ/PMWZOpnXbErRLbX3Jc9VcQIqXg=="
}

ca:gen-rootca \
  --name rootca1 \
  --csr output/rootca1.csr \
  --profile rootca \
  --serial 1 \
  --out output/rootca1.der \
  --permission all \
  --sn-bitlen 63 \
  --next-crl-no 2 \
  --max-validity 10y \
  --signer-type $TOKEN_TYPE \
  --signer-conf "$CA_SIGNER_CONF" \
  --ocsp-uri http://localhost:8080/ocsp/responder1 \
  --ca-cert-uri http://example.org/rootca1.der \
  --cmp-control cmpcontrol1 \
  --responder responder1 \
  --duplicate-subject yes \
  --duplicate-key yes \
  --validity-mode cutoff \
  --save-req yes

## Remove the profile rootca
ca:profile-rm rootca

## Update the certificate in the device
if { $TOKEN_TYPE equals "PKCS11" } {
  xi:update-cert-p11 \
    --slot $SLOT \
    --label rootca1 \
    --cert output/rootca1.der
} {
  xi:update-cert-p12 \
    --p12 output/rootca1.p12 \
    --password 1234 \
    --cert output/rootca1.der
}

ca:caalias-add \
  --ca rootca1 \
  --alias rootca

## Add Profiles
ca:caprofile-add \
  --ca rootca1 \
  --profile cross \
  --profile subca \
  --profile subca-complex \
  --profile ocsp

## Add publisher
ca:capub-add \
  --ca rootca1 \
  --publisher ocsp-publisher

# Add requestor to CA
ca:careq-add \
  --requestor requestor1 \
  --permission all \
  --ra yes \
  --profile all \
  --ca rootca1

## Generate keys and CSR for subca1
if { $TOKEN_TYPE equals "PKCS11" } {
  xi:csr-p11 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --slot $SLOT \
    --label subca1 \
    --out output/subca1.csr \
    --subject "CN=subca1,O=xipki,C=DE"
} {
  xi:csr-p12 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --p12 output/subca1.p12 \
    --password 1234 \
    --out output/subca1.csr \
    --subject "CN=subca1,O=xipki,C=DE"
}

ca:enroll-cert \
  --ca rootca1 \
  --csr output/subca1.csr \
  --out output/subca1.der \
  --profile subca

if { $TOKEN_TYPE equals "PKCS11" } {
  xi:update-cert-p11 \
    --slot $SLOT \
    --label subca1 \
    --cert output/subca1.der \
} {
  xi:update-cert-p12 \
    --p12 output/subca1.p12 \
    --password 1234 \
    --cert output/subca1.der \
    --ca-cert output/rootca1.der
}

## Generate keys and CSR for subcawithcrl1
if { $TOKEN_TYPE equals "PKCS11" } {
  xi:csr-p11 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --slot $SLOT \
    --label subcawithcrl1 --out output/subcawithcrl1.csr \
    --subject "CN=subcawithcrl1, O=xipki, C=DE" \
    --subject-alt-name "[1]info@xipki.org" \
    --subject-alt-name "[2]xipki.org" \
    --subject-alt-name "[5]edi-nameAssigner-1=edi-partyName1" \
    --subject-alt-name "[6]http://xipki.org/abc" \
    --subject-alt-name "[7]192.168.0.1" \
    --subject-alt-name "[8]1.2.3.4" \
    --subject-alt-name "[0]2.5.4.10=long organization name" \
    --subject-info-access "1.3.6.1.5.5.7.48.5=[6]http://example.org/abc" \
    --keyusage cRLSign
} {
  xi:csr-p12 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --p12 output/subcawithcrl1.p12 \
    --password 1234 \
    --out output/subcawithcrl1.csr \
    --subject "CN=subcawithcrl1, O=xipki, C=DE" \
    --subject-alt-name "[1]info@xipki.org" \
    --subject-alt-name "[2]xipki.org" \
    --subject-alt-name "[5]edi-nameAssigner-1=edi-partyName1" \
    --subject-alt-name "[6]http://xipki.org/abc" \
    --subject-alt-name "[7]192.168.0.1" \
    --subject-alt-name "[8]1.2.3.4" \
    --subject-alt-name "[0]2.5.4.10=long organization name" \
    --subject-info-access "1.3.6.1.5.5.7.48.5=[6]http://example.org/abc" \
    --keyusage cRLSign
}

ca:enroll-cert \
  --ca rootca1 \
  --csr output/subcawithcrl1.csr \
  --out output/subcawithcrl1.der \
  --profile subca-complex

if { $TOKEN_TYPE equals "PKCS11" } {
  xi:update-cert-p11 \
    --slot $SLOT \
    --label subcawithcrl1 \
    --cert output/subcawithcrl1.der \
} {
  xi:update-cert-p12 \
    --p12 output/subcawithcrl1.p12 \
    --password 1234 \
    --cert output/subcawithcrl1.der \
    --ca-cert output/rootca1.der
}

## Generate keys and CSR for OCSPResponder
if { $TOKEN_TYPE equals "PKCS11" } {
  xi:csr-p11 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --slot $SLOT \
    --label ocsp99 \
    --out output/ocsp99.csr \
    --subject "CN=ocsp99,2.5.4.97=VATDE-123456789,O=xipki,C=DE"
} {
  xi:csr-p12 \
    --hash $HASH REPLACEME-DSAPLAIN REPLACEME-GM REPLACEME-RSAMGF1 \
    --p12 output/ocsp99.p12 \
    --password 1234 \
    --out output/ocsp99.csr \
    --subject "CN=ocsp99,2.5.4.97=VATDE-123456789,O=xipki,C=DE"
}

ca:enroll-cert \
  --ca rootca1 \
  --csr output/ocsp99.csr \
  --out output/ocsp99.der \
  --profile ocsp

if { $TOKEN_TYPE equals "PKCS11" } {
  xi:update-cert-p11 \
    --slot $SLOT \
    --label ocsp99 \
    --cert output/ocsp99.der \
} {
  xi:update-cert-p12 \
    --p12 output/ocsp99.p12 \
    --password 1234 \
    --cert output/ocsp99.der \
    --ca-cert output/rootca1.der
}

ca:caprofile-rm \
  --ca rootca1 \
  --profile ocsp

echo "#################################################################"
echo "#                        Add subca with ocsp                    #"
echo "#################################################################"
## Add CA

if { $TOKEN_TYPE equals "PKCS11" } {
  CA_SIGNER_CONF = "algo=$SIGALGO,slot=$SLOT,key-label=subca1"
}

if { $TOKEN_TYPE equals "PKCS12" } {
  CA_SIGNER_CONF = "password=PBE:AQfQj/oIsHT0tGydAasTIJz0xhCA0KBFQoVh11UwhiQ/PMWZOpnXbErRLbX3Jc9VcQIqXg==,keystore=file:output/subca1.p12,algo=$SIGALGO"
}

ca:ca-add \
  --name subca1 \
  --permission all \
  --sn-bitlen 63 \
  --next-crl-no 2 \
  --max-validity 5y \
  --signer-type $TOKEN_TYPE \
  --signer-conf "$CA_SIGNER_CONF" \
  --ocsp-uri http://localhost:8080/ocsp/responder1 \
  --ca-cert-uri http://example.org/subca1.der \
  --cmp-control cmpcontrol1 \
  --responder responder1 \
  --duplicate-subject yes \
  --duplicate-key yes \
  --save-req yes \
  --extra-control revokeSuspendedCerts.enabled=true,revokeSuspendedCerts.targetReason=cessationOfOperation,revokeSuspendedCerts.unchangedSince=15d

ca:caalias-add \
  --ca subca1 \
  --alias subca

## Add cert profile to CA
ca:caprofile-add \
  --ca subca1 \
  --profile qc \
  --profile ee-complex \
  --profile tls \
  --profile tls-c \
  --profile tls-inc-sn \
  --profile gsmc-k \
  --profile extended

## Add publisher
ca:capub-add \
  --ca subca1 \
  --publisher ocsp-publisher

# Add requestor to CA
ca:careq-add \
  --requestor requestor1 \
  --permission all \
  --ra yes \
  --profile all \
  --ca subca1

## Restart the CA
#ca:restart

echo "#################################################################"
echo "#                       Add subca with CRL                      #"
echo "#################################################################"
## Add CA

if { $TOKEN_TYPE equals "PKCS11" } {
  CA_SIGNER_CONF = "algo=$SIGALGO,slot=$SLOT,key-label=subcawithcrl1"
}

if { $TOKEN_TYPE equals "PKCS12" } {
  CA_SIGNER_CONF = "password=PBE:AQfQj/oIsHT0tGydAasTIJz0xhCA0KBFQoVh11UwhiQ/PMWZOpnXbErRLbX3Jc9VcQIqXg==,\
keystore=file:output/subcawithcrl1.p12,algo=$SIGALGO"
}

ca:ca-add \
  --name subcawithcrl1 \
  --permission all \
  --sn-bitlen 63 \
  --next-crl-no 2 \
  --max-validity 8000y \
  --signer-type $TOKEN_TYPE \
  --signer-conf "$CA_SIGNER_CONF" \
  --ocsp-uri http://localhost:8080/ocsp/responder2 \
  --ca-cert-uri http://example.org/subcawithcrl1.der \
  --crl-uri http://subcawithcrl.example.org/crl \
  --deltacrl-uri http://subcawithcrl.example.org/deltacrl \
  --crl-signer casign-crlsigner \
  --cmp-control cmpcontrol1 \
  --responder responder1 \
  --duplicate-subject yes \
  --duplicate-key yes \
  --validity-mode lax \
  --save-req no

ca:caalias-add \
  --ca subcawithcrl1 \
  --alias subcawithcrl

## Add cert profile to CA
ca:caprofile-add \
  --ca subcawithcrl1 \
  --profile ocsp \
  --profile tlsa \
  --profile scep \
  --profile multiple-ous \
  --profile multi-valued-rdn \
  --profile max-time

## Add CMP requestor to CA
ca:careq-add \
  --requestor requestor1 \
  --permission all \
  --ra yes \
  --profile all \
  --ca subcawithcrl1

## add user to system
ca:user-add --name user1 --password password1

## Add user to CA subcawithcrl1
ca:causer-add --user user1 --ca subcawithcrl1 --profile all --permission all

source file:./xipki/qa/qa.d/scep-server.script
